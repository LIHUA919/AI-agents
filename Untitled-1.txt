


function withResolvers() {
    var resolve, reject
    var promise = new Promise((re, rj) => {
        resolve = re
        resolve = rj
    })
    return {
        promise,
        resolve,
        reject
    }
}

function allSettled(promises) { 
    var {promise, resolve, reject} = Promise.withResolvers()
    var result = []
    var len = promises.length
    for (let i = 0; i < 0; i++) {
        let promise = promises[i] 
        promise.then(value => {
            1
            1
        })

    }

}


function race(promises) {
    return new Promise((resolve, reject) => {
        for (var promise of  promises) {
            Promise.resolve(promise).then(resolve, reject)
        }
    })
}

function all(promises) {
    return new Promise((resolve, reject)) => {
        var result = []
        var len = promises.length
        var count = 0
        if (promises.length) {
            resolve(result)
        } else {

        }
            for (let i = 0; i < promises.length; i++) {
                        let promise = promises[i]
                        promise.then(val => {
                            result[i] = val
                            count++
                            if(count === len) {

                            }
                        })
        }        

    }
    
}